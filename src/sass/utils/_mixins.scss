
@use "sass:map";

/* ======================================== */
/* MIXINS */
/* ======================================== */
/* ======================================== */
/* BREAKPOINTS*/
/* ======================================== */
$breakpoints: (xs-mobile: 375px, mobile: 600px, tablet: 768px, laptop: 992px, desktop: 1200px );

/* == up to 375  */
@mixin max-375px {
    @media screen and (max-width: map-get($breakpoints, xs-mobile )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}
/* == from 375  */
@mixin min-375px {
    @media screen and (min-width: map-get($breakpoints, xs-mobile )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}
/* == up to 600  */
@mixin max-600px {
    @media screen and (max-width: map-get($breakpoints, mobile )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}
/* == from 600  */
@mixin min-600px {
    @media screen and (min-width: map-get($breakpoints, mobile )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}
/* == up to 992  */
@mixin max-992px {
    @media screen and (max-width: map-get($breakpoints, laptop )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}
/* == from 992  */
@mixin min-992px {
    @media screen and (min-width: map-get($breakpoints, laptop )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}

/* == up to 1200  */
@mixin max-1200px {
    @media screen and (max-width: map-get($breakpoints, desktop )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}

/* == from 1200  */
@mixin min-1200px {
    @media screen and (min-width: map-get($breakpoints, desktop )) {
        @content;
        @include transition(all, 1s, ease-in-out);
    }
}



/* ======================================== */
/* MARGINS  */
/* ======================================== */

@mixin mlmr-auto { margin-left: auto; margin-right: auto; }

@mixin m-auto { margin: auto; }



/* ======================================== */
/* PADDINGS  */
/* ======================================== */

@mixin p-top-base {
    padding-top: 25px;
}


/* ======================================== */
/* SIZE */
/* ======================================== */
@mixin h100w100 {
    height:100%; width:100%;
}

/* ======================================== */
/* POSITION */
/* ======================================== */
@mixin centered {
    display: flex;       
    justify-content: center;
    align-items: center;
}

/* ======================================== */
/* FLEXBOX */
/* ======================================== */
@mixin flex($dir, $wraptype) {
    display: flex;
    flex-flow: $dir $wraptype;
}


/* ======================================== */
/* BORDER-RADIUS */
/* ======================================== */

@mixin border-radius($pixel...) {
    border-radius: $pixel;
}

/* ======================================== */
/* TRANSITIONS */
/* ======================================== */

@mixin transition($elements, $duration, $type) {
    transition: $elements $duration $type;
    -webkit-transition: $elements $duration $type;
    -ms-transition: $elements $duration $type;
    -moz-transition: $elements $duration $type;
    -o-transition: $elements $duration $type;
}

/* ======================================== */
/* COMMON ELEMENTS */
/* ======================================== */
@mixin icon-base {
    display: flex;
    justify-content: center;
    align-items: center;
}
@mixin icon-size( $size: 1.3em ) { 
    font-size: $size;
}

/* ======================================== */
/* ACCESSIBILITY */
/* ======================================== */
// The common approach used to hide information visually but keep them available to screen reader 
// and other assistive technology users is to use CSS that will keep the information technically 
// visible but practically hidden

@mixin visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

/* ======================================== */
/* EFFECTS */
/* ======================================== */

@mixin box-shadow($color: $dark) { 
    box-shadow: 0px 12px 10px $color;
    // @include transition(.5s);
}


/* ======================================== */
/* COLORS ( exceptions, otherwise = in _variables.scss )*/
/* ======================================== */

